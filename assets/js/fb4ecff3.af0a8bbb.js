"use strict";(self.webpackChunkrck_docs=self.webpackChunkrck_docs||[]).push([[781],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),g=l(n),p=a,h=g["".concat(c,".").concat(p)]||g[p]||d[p]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9139:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o={title:"Create your first widget"},s=void 0,c={unversionedId:"create-a-widget",id:"create-a-widget",isDocsHomePage:!1,title:"Create your first widget",description:"Widgets are custom components that make this package extremely flexible. Since widgets are just",source:"@site/docs/create-a-widget.md",sourceDirName:".",slug:"/create-a-widget",permalink:"/react-chatbot-kit-docs/docs/create-a-widget",tags:[],version:"current",frontMatter:{title:"Create your first widget"},sidebar:"docs",previous:{title:"Configure your bot",permalink:"/react-chatbot-kit-docs/docs/configure-your-bot"},next:{title:"Creating messages",permalink:"/react-chatbot-kit-docs/docs/message-functions"}},l=[{value:"Step 1: Creating your first widget",id:"step-1-creating-your-first-widget",children:[]},{value:"Step 2: Register your widget in the configuration",id:"step-2-register-your-widget-in-the-configuration",children:[]},{value:"Step 3: Create a new action in the ActionProvider",id:"step-3-create-a-new-action-in-the-actionprovider",children:[]},{value:"Step 4: Trigger the action by adding a MessageParser rulesets",id:"step-4-trigger-the-action-by-adding-a-messageparser-rulesets",children:[]},{value:"Step 5: Test your new widget",id:"step-5-test-your-new-widget",children:[]},{value:"That&#39;s it!",id:"thats-it",children:[]}],u={toc:l};function d(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Widgets are custom components that make this package extremely flexible. Since widgets are just\nplain react components, only your imagination limits what you can build. In this guide we'll go ahead and implement our first widget."),(0,i.kt)("h2",{id:"step-1-creating-your-first-widget"},"Step 1: Creating your first widget"),(0,i.kt)("p",null,"We start by creating a regular react component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// new file called DogPicture.jsx\nimport React, { useEffect, useState } from 'react';\n\nconst DogPicture = () => {\n  const [imageUrl, setImageUrl] = useState('');\n\n  useEffect(() => {\n    fetch('https://dog.ceo/api/breeds/image/random')\n      .then((res) => res.json())\n      .then((data) => {\n        setImageUrl(data.message);\n      });\n  }, []);\n\n  return (\n    <div>\n      <img src={imageUrl} alt='a dog' />\n    </div>\n  );\n};\n\nexport default DogPicture;\n")),(0,i.kt)("h2",{id:"step-2-register-your-widget-in-the-configuration"},"Step 2: Register your widget in the configuration"),(0,i.kt)("p",null,"Once we have completed our widget, we now need to register it in the config file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import DogPicture from '../components/DogPicture/DogPicture.jsx\"\n\nconst config = {\n  initialMessages: [createChatBotMessage(`Hi! I'm ${botName}`)],\n  widgets: [\n    {\n      widgetName: 'dogPicture',\n      widgetFunc: (props) => <DogPicture {...props} />,\n    },\n  ],\n};\n")),(0,i.kt)("h2",{id:"step-3-create-a-new-action-in-the-actionprovider"},"Step 3: Create a new action in the ActionProvider"),(0,i.kt)("p",null,'After the registration, we can now use the widget when we create a new chatbot message in the actionprovider by specifying the "widget" key in the options object given as the second argument to createChatbotMessage.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\n\nconst ActionProvider = ({ createChatBotMessage, setState, children }) => {\n  const handleHello = () => {\n    const botMessage = createChatBotMessage('Hello. Nice to meet you.');\n\n    setState((prev) => ({\n      ...prev,\n      messages: [...prev.messages, botMessage],\n    }));\n  };\n\n  const handleDog = () => {\n    const botMessage = createChatBotMessage(\n      \"Here's a nice dog picture for you!\",\n      {\n        widget: 'dogPicture',\n      }\n    );\n\n    setState((prev) => ({\n      ...prev,\n      messages: [...prev.messages, botMessage],\n    }));\n  };\n\n  // Put the handleHello and handleDog function in the actions object to pass to the MessageParser\n  return (\n    <div>\n      {React.Children.map(children, (child) => {\n        return React.cloneElement(child, {\n          actions: {\n            handleHello,\n            handleDog,\n          },\n        });\n      })}\n    </div>\n  );\n};\n\nexport default ActionProvider;\n")),(0,i.kt)("h2",{id:"step-4-trigger-the-action-by-adding-a-messageparser-rulesets"},"Step 4: Trigger the action by adding a MessageParser rulesets"),(0,i.kt)("p",null,"Finally, we need to create a rule that will trigger our new action and widget:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// in MessageParser.jsx\nimport React from 'react';\n\nconst MessageParser = ({ children, actions }) => {\n  const parse = (message) => {\n    if (message.includes('hello')) {\n      actions.handleHello();\n    }\n\n    if (message.includes('dog')) {\n      actions.handleDog();\n    }\n  };\n\n  return (\n    <div>\n      {React.Children.map(children, (child) => {\n        return React.cloneElement(child, {\n          parse: parse,\n          actions,\n        });\n      })}\n    </div>\n  );\n};\n\nexport default MessageParser;\n")),(0,i.kt)("h2",{id:"step-5-test-your-new-widget"},"Step 5: Test your new widget"),(0,i.kt)("p",null,'Now you\'re ready to test your new widget. Start your project and navigate to the page where your chatbot is initialized. Try inputing any message including the word "dog" in the input field and see what the response is.'),(0,i.kt)("h2",{id:"thats-it"},"That's it!"),(0,i.kt)("p",null,"Nice job, you now know how to create and utilize widgets, which provides an extremely flexible way of creating different interactions for your chatbot."))}d.isMDXComponent=!0}}]);