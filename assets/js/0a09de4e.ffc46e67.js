"use strict";(self.webpackChunkrck_docs=self.webpackChunkrck_docs||[]).push([[125],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),h=a,g=d["".concat(c,".").concat(h)]||d[h]||p[h]||o;return n?r.createElement(g,s(s({ref:t},u),{},{components:n})):r.createElement(g,s({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3459:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return l},default:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s={title:"Create your first response"},i=void 0,c={unversionedId:"create-a-response",id:"create-a-response",isDocsHomePage:!1,title:"Create your first response",description:"The chatbot should now be operational, but supplying a message through the input field will not",source:"@site/docs/create-a-response.md",sourceDirName:".",slug:"/create-a-response",permalink:"/react-chatbot-kit-docs/docs/create-a-response",tags:[],version:"current",frontMatter:{title:"Create your first response"},sidebar:"defaultSidebar",previous:{title:"Create a Document",permalink:"/react-chatbot-kit-docs/docs/create-a-document"},next:{title:"Create your first widget",permalink:"/react-chatbot-kit-docs/docs/create-a-widget"}},l=[{value:"Step 1: Setting up a parser rule",id:"step-1-setting-up-a-parser-rule",children:[]},{value:"Step 2: Add an action",id:"step-2-add-an-action",children:[]},{value:"Step 3: Trigger the action in the messageparser",id:"step-3-trigger-the-action-in-the-messageparser",children:[]},{value:"Step 4: Test your response",id:"step-4-test-your-response",children:[]},{value:"Nice job",id:"nice-job",children:[]}],u={toc:l};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The chatbot should now be operational, but supplying a message through the input field will not\ntrigger a response. This needs to be configured by you through the ActionProvider and the MessageParser."),(0,o.kt)("h2",{id:"step-1-setting-up-a-parser-rule"},"Step 1: Setting up a parser rule"),(0,o.kt)("p",null,"Every message that the user sends is passed through the MessageParser's parse function. Inside of this function you can provide a ruleset that decides which action to trigger. Open up MessageParser.js and add the following in the parse function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// in MessageParser.js\nclass MessageParser {\n  constructor(actionProvider, state) {\n    this.actionProvider = actionProvider;\n    this.state = state;\n  }\n\n  parse(message) {\n    if (message.includes('hello')) {\n      console.log('hi');\n    }\n  }\n}\n")),(0,o.kt)("p",null,"For now, we'll put a console log in the ruleset."),(0,o.kt)("h2",{id:"step-2-add-an-action"},"Step 2: Add an action"),(0,o.kt)("p",null,"Now that we have a ruleset, we need to create an action to trigger. Open up ActionProvider.js and add the following method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// in ActionProvider.js\nclass ActionProvider {\n  constructor(createChatbotMessage, setStateFunc, createClientMessage) {\n    this.createChatbotMessage = createChatbotMessage;\n    this.setState = setStateFunc;\n    this.createClientMessage = createClientMessage;\n  }\n\n  handleHello() {\n    const message = this.createChatBotmessage('Hello. Nice to meet you.');\n\n    this.setState((prev) => ({\n      ...prev,\n      messages: [...prev.messages, botMessage],\n    }));\n  }\n}\n\nexport default ActionProvider;\n")),(0,o.kt)("p",null,"Inside if handleHello, we are creating a new chatbotMessage and inserting it into state using the setState function. These functions are passed to the ActionProvider upon initialization of the chatbot and can manipulate the internal chatbot state."),(0,o.kt)("h2",{id:"step-3-trigger-the-action-in-the-messageparser"},"Step 3: Trigger the action in the messageparser"),(0,o.kt)("p",null,"Now that we have created our action, we can trigger it inside our ruleset in the MessageParser:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// in MessageParser.js\nclass MessageParser {\n  constructor(actionProvider, state) {\n    this.actionProvider = actionProvider;\n    this.state = state;\n  }\n\n  parse(message) {\n    if (message.includes('hello')) {\n      this.actionProvider.handleHello();\n    }\n  }\n}\n")),(0,o.kt)("h2",{id:"step-4-test-your-response"},"Step 4: Test your response"),(0,o.kt)("p",null,"In the browser, open up the page where you have your Chatbot displayed and try to type \"hello chatbot\" into the inputfield. You should receive a response from the Chatbot with the text: 'Hello, nice to meet you.'"),(0,o.kt)("h2",{id:"nice-job"},"Nice job"),(0,o.kt)("p",null,"Great, you have now created your first chatbot response."))}p.isMDXComponent=!0}}]);