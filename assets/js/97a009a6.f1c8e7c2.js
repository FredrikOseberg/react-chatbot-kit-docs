"use strict";(self.webpackChunkrck_docs=self.webpackChunkrck_docs||[]).push([[800],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,g=m["".concat(l,".").concat(d)]||m[d]||p[d]||r;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5590:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i={title:"Configuration"},s=void 0,l={unversionedId:"advanced/configuration",id:"advanced/configuration",isDocsHomePage:!1,title:"Configuration",description:"Here is an overview over all possible react-chatbot-kit configuration options:",source:"@site/docs/advanced/configuration.md",sourceDirName:"advanced",slug:"/advanced/configuration",permalink:"/react-chatbot-kit-docs/docs/advanced/configuration",tags:[],version:"current",frontMatter:{title:"Configuration"},sidebar:"docs",previous:{title:"Creating messages",permalink:"/react-chatbot-kit-docs/docs/message-functions"},next:{title:"Customizing CSS",permalink:"/react-chatbot-kit-docs/docs/advanced/configuring-css"}},c=[{value:"initialMessages",id:"initialmessages",children:[{value:"Example",id:"example",children:[]}]},{value:"botName",id:"botname",children:[{value:"Example",id:"example-1",children:[]}]},{value:"customStyles",id:"customstyles",children:[{value:"Example",id:"example-2",children:[]}]},{value:"state",id:"state",children:[{value:"Example",id:"example-3",children:[]}]},{value:"customComponents",id:"customcomponents",children:[{value:"Example",id:"example-4",children:[]}]},{value:"Widgets",id:"widgets",children:[{value:"Example",id:"example-5",children:[]}]}],u={toc:c};function p(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Here is an overview over all possible react-chatbot-kit configuration options:"),(0,r.kt)("h2",{id:"initialmessages"},"initialMessages"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type: array"),(0,r.kt)("li",{parentName:"ul"},"function: The initialmessages that the chatbot trigger when it mounts."),(0,r.kt)("li",{parentName:"ul"},"required: yes")),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const config = {\n  initialMessages: [createChatBotMessage(`Hi! I'm ${botName}`)],\n};\n")),(0,r.kt)("h2",{id:"botname"},"botName"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type: string"),(0,r.kt)("li",{parentName:"ul"},"function: Sets the name of the chatbot in the header of the bot."),(0,r.kt)("li",{parentName:"ul"},"required: no")),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const config = {\n  initialMessages: [createChatBotMessage(`Hi! I'm ${botName}`)],\n  botName: 'ExampleBot',\n};\n")),(0,r.kt)("h2",{id:"customstyles"},"customStyles"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type: object"),(0,r.kt)("li",{parentName:"ul"},"function: Allows you to override some of the default styles of the chatbot through the config"),(0,r.kt)("li",{parentName:"ul"},"required: no")),(0,r.kt)("h3",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const config = {\n  initialMessages: [createChatBotMessage(`Hi! I'm ${botName}`)],\n  customStyles: {\n    botMessageBox: {\n      backgroundColor: '#376B7E',\n    },\n    chatButton: {\n      backgroundColor: '#5ccc9d',\n    },\n  },\n};\n")),(0,r.kt)("h2",{id:"state"},"state"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type: object"),(0,r.kt)("li",{parentName:"ul"},"function: Allows you to set properties to inject into the internal chatbot state"),(0,r.kt)("li",{parentName:"ul"},"required: no")),(0,r.kt)("h3",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const config = {\n  initialMessages: [createChatBotMessage(`Hi! I'm ${botName}`)],\n  state: {\n    myCustomProperty: 'Bikershorts',\n  },\n};\n")),(0,r.kt)("h2",{id:"customcomponents"},"customComponents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type: object"),(0,r.kt)("li",{parentName:"ul"},"function: Allows you to replace some of the stock components from react-chatbot-kit with your own components"),(0,r.kt)("li",{parentName:"ul"},"required: no")),(0,r.kt)("h3",{id:"example-4"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const config = {\n  initialMessages: [createChatBotMessage(`Hi! I\'m ${botName}`)],\n customComponents: {\n     // Replaces the default header\n    header: () => <div style={{ backgroundColor: \'red\', padding: "5px", borderRadius: "3px" }}>This is the header</div>\n    // Replaces the default bot avatar\n    botAvatar: (props) => <MyAvatar {...props} />,\n    // Replaces the default bot chat message container\n    botChatMessage: (props) => <MyCustomChatMessage {...props} />,\n    // Replaces the default user icon\n    userAvatar: (props) => <MyCustomAvatar {...props} />,\n    // Replaces the default user chat message\n    userChatMessage: (props) => <MyCustomUserChatMessage {...props} />\n  },\n};\n')),(0,r.kt)("h2",{id:"widgets"},"Widgets"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type: object"),(0,r.kt)("li",{parentName:"ul"},"function: Allows you to specify custom react components that you can render into the chat window with a chatbot response"),(0,r.kt)("li",{parentName:"ul"},"required: no")),(0,r.kt)("h3",{id:"example-5"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const config = {\n  initialMessages: [createChatBotMessage(`Hi! I'm ${botName}`)],\n  widgets: [\n    {\n      // defines the name you will use to reference to this widget in \"createChatBotMessage\".\n      widgetName: 'singleFlight',\n      // Function that will be called internally to resolve the widget\n      widgetFunc: (props) => <SingleFlight {...props} />,\n      // Any props you want the widget to receive on render\n      props: {},\n      // Any piece of state defined in the state object that you want to pass down to this widget\n      mapStateToProps: ['selectedFlightId', 'selectedFlight'],\n    },\n  ],\n};\n")))}p.isMDXComponent=!0}}]);