"use strict";(self.webpackChunkrck_docs=self.webpackChunkrck_docs||[]).push([[12],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(n),g=r,m=p["".concat(c,".").concat(g)]||p[g]||d[g]||o;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6504:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),s={title:"Saving dialogue"},i=void 0,c={unversionedId:"advanced/saving-dialogue",id:"advanced/saving-dialogue",isDocsHomePage:!1,title:"Saving dialogue",description:"In order to save the chatbot dialogue you can choose to provide a save method and a load method to the chatbot as props:",source:"@site/docs/advanced/saving-dialogue.md",sourceDirName:"advanced",slug:"/advanced/saving-dialogue",permalink:"/react-chatbot-kit-docs/docs/advanced/saving-dialogue",tags:[],version:"current",frontMatter:{title:"Saving dialogue"},sidebar:"defaultSidebar",previous:{title:"Custom messages",permalink:"/react-chatbot-kit-docs/docs/advanced/custom-messages"},next:{title:"Widgets",permalink:"/react-chatbot-kit-docs/docs/advanced/widgets"}},l=[{value:"Rendering static content",id:"rendering-static-content",children:[]}],u={toc:l};function d(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In order to save the chatbot dialogue you can choose to provide a save method and a load method to the chatbot as props:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import React, { useState } from 'react';\nimport Chatbot from 'react-chatbot-kit';\nimport config from './config';\nimport actionProvider from './actionProvider.js';\nimport messageParser from './messageParser.js';\n\nfunction App() {\n  const [showBot, toggleBot] = useState(false);\n\n  const saveMessages = (messages, HTMLString) => {\n    localStorage.setItem('chat_messages', JSON.stringify(messages));\n  };\n\n  const loadMessages = () => {\n    const messages = JSON.parse(localStorage.getItem('chat_messages'));\n    return messages;\n  };\n\n  return (\n    <div className='App'>\n      {showBot && (\n        <Chatbot\n          config={config}\n          actionProvider={actionProvider}\n          messageHistory={loadMessages()}\n          messageParser={messageParser}\n          saveMessages={saveMessages}\n        />\n      )}\n      <button onClick={() => toggleBot((prev) => !prev)}>Bot</button>\n    </div>\n  );\n}\n\nexport default App;\n")),(0,o.kt)("h2",{id:"rendering-static-content"},"Rendering static content"),(0,o.kt)("p",null,"This will save the content of the state objects messages array and will load up the content when the chatbot is next mounted."),(0,o.kt)("p",null,"The saveMessages receives two inputs:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The messages array from state"),(0,o.kt)("li",{parentName:"ul"},"The HTML content of the chatbot messages container")),(0,o.kt)("p",null,"If you choose to save the HTML string and return the string from your loadMessages function, the content will be inserted as HTML instead of evaluating the array again when the chatbot loads (which may be counter intuitive if you have a lot of widget interactivity)."),(0,o.kt)("p",null,"NOTE: Keep in mind that saving the HTML will save the state exactly as it was when the chatbot was closed, and any interactivity will be lost."))}d.isMDXComponent=!0}}]);