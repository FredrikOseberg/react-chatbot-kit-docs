"use strict";(self.webpackChunkrck_docs=self.webpackChunkrck_docs||[]).push([[223],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||o;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9890:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),s={title:"Chatbot properties"},i=void 0,l={unversionedId:"advanced/chatbot-props",id:"advanced/chatbot-props",isDocsHomePage:!1,title:"Chatbot properties",description:"The chatbot takes the following properties:",source:"@site/docs/advanced/chatbot-props.md",sourceDirName:"advanced",slug:"/advanced/chatbot-props",permalink:"/react-chatbot-kit-docs/docs/advanced/chatbot-props",tags:[],version:"current",frontMatter:{title:"Chatbot properties"},sidebar:"docs",previous:{title:"Saving dialogue",permalink:"/react-chatbot-kit-docs/docs/advanced/saving-dialogue"},next:{title:"Custom messages",permalink:"/react-chatbot-kit-docs/docs/advanced/custom-messages"}},c=[{value:"actionProvider",id:"actionprovider",children:[]},{value:"messageParser",id:"messageparser",children:[]},{value:"config",id:"config",children:[]},{value:"headerText",id:"headertext",children:[]},{value:"placeholderText",id:"placeholdertext",children:[]},{value:"saveMessages",id:"savemessages",children:[]},{value:"messageHistory",id:"messagehistory",children:[]},{value:"validator",id:"validator",children:[]},{value:"runInitialMessagesWithHistory",id:"runinitialmessageswithhistory",children:[]},{value:"disableScrollToBottom",id:"disablescrolltobottom",children:[]}],u={toc:c};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The chatbot takes the following properties:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<Chatbot\n  actionProvider={actionProvider}\n  messageParser={messageParser}\n  config={config}\n  headerText='Chatbot'\n  placeholderText='Input placeholder'\n  messageHistory={loadMessages()}\n  saveMessages={saveMessages}\n  validator={validateInput}\n  runInitialMessagesWithHistory\n  disableScrollToBottom\n/>\n")),(0,o.kt)("h2",{id:"actionprovider"},"actionProvider"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"type: class"),(0,o.kt)("li",{parentName:"ul"},"required: yes")),(0,o.kt)("p",null,"The actionprovider is a class that implements the actionProvider interface. It's job is to update the state of the chatbot and create actions to update the UI."),(0,o.kt)("p",null,"It receives the following parameters on initialization:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const actionProv = new actionProvider(\n  createChatBotMessage,\n  setState,\n  createClientMessage,\n  stateRef.current,\n  createCustomMessage,\n  rest\n);\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"createChatbotMessage: function"),(0,o.kt)("li",{parentName:"ul"},"setState: function"),(0,o.kt)("li",{parentName:"ul"},"createClientMessage: function"),(0,o.kt)("li",{parentName:"ul"},"stateRef: object"),(0,o.kt)("li",{parentName:"ul"},"createCustomMessage: function"),(0,o.kt)("li",{parentName:"ul"},"rest parameters: array")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"export const ActionProvider = ({\n  createChatBotMessage,\n  setState,\n  children,\n}) => {\n  const handleHello = () => {\n    const botMessage = createChatBotMessage('Hello. Nice to meet you.');\n\n    setState((prev) => ({\n      ...prev,\n      messages: [...prev.messages, botMessage],\n    }));\n  };\n\n  // Put the handleHello function in the actions object to pass to the MessageParser\n  return (\n    <div>\n      {React.Children.map(children, (child) => {\n        return React.cloneElement(child, {\n          actions: {\n            handleHello,\n          },\n        });\n      })}\n    </div>\n  );\n};\n")),(0,o.kt)("h2",{id:"messageparser"},"messageParser"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"type: Class"),(0,o.kt)("li",{parentName:"ul"},"required: yes")),(0,o.kt)("p",null,"The messageparser receives the user input and decides which action to invoke from the action provider. It receives the action provider as the first argument, and a reference to the state as the second argument on initialization."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\n\nexport const MessageParser = ({ children, actions }) => {\n  const parse = (message) => {\n    if (message.includes('hello')) {\n      actions.handleHello();\n    }\n  };\n\n  return (\n    <div>\n      {React.Children.map(children, (child) => {\n        return React.cloneElement(child, {\n          parse: parse,\n          actions,\n        });\n      })}\n    </div>\n  );\n};\n")),(0,o.kt)("h2",{id:"config"},"config"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"type: object"),(0,o.kt)("li",{parentName:"ul"},"required: yes")),(0,o.kt)("p",null,"The config allows you to configure the chatbot as you'd like, register widgets, custom messages and change out components and colors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import React from "react";\nimport { createChatBotMessage } from "react-chatbot-kit";\n\nimport SingleFlight from \'./components/SingleFlight/SingleFlight\'\n\nconst botName = "Somebot";\n\nconst config = {\n  // Defines the chatbot name\n  botName: botName,\n  // Defines an array of initial messages that will be displayed on first render\n  initialMessages: [\n    createChatBotMessage(`Hi I\'m ${botName}`),\n    createChatBotMessage(\n      "First things first, which airport are you looking for information from?",\n      {\n        widget: "airportSelector",\n        delay: 500,\n      }\n    ),\n  ],\n  // Defines an object that will be injected into the chatbot state, you can use this state in widgets for example\n  state: {\n    airports: [],\n    flightType: "",\n    selectedFlightId: "",\n    selectedFlight: null,\n  },\n  // Defines an object of custom components that will replace the stock chatbot components.\n  customComponents: {\n     // Replaces the default header\n    header: () => <div style={{ backgroundColor: \'red\', padding: "5px", borderRadius: "3px" }}>This is the header</div>\n    // Replaces the default bot avatar\n    botAvatar: (props) => <FlightBotAvatar {...props} />,\n    // Replaces the default bot chat message container\n    botChatMessage: (props) => <CustomChatMessage {...props} />,\n    // Replaces the default user icon\n    userAvatar: (props) => <MyUserAvatar {...props} />,\n    // Replaces the default user chat message\n    userChatMessage: (props) => <MyUserChatMessage {...props} />\n  },\n  // Register your own set of components as custom message types\n  customMessages: {\n      "custom": (props) => <MyCustomMessage {...props} />\n  },\n  // Defines an object of custom styles if you want to override styles\n  customStyles: {\n    // Overrides the chatbot message styles\n    botMessageBox: {\n      backgroundColor: "#376B7E",\n    },\n    // Overrides the chat button styles\n    chatButton: {\n      backgroundColor: "#5ccc9d",\n    },\n  }\n  // Defines an array of widgets that you want to render with a chatbot message\n  widgets: [\n    {\n      // defines the name you will use to reference to this widget in "createChatBotMessage".\n      widgetName: "singleFlight",\n      // Function that will be called internally to resolve the widget\n      widgetFunc: (props) => <SingleFlight {...props} />,\n      // Any props you want the widget to receive on render\n      props: {},\n      // Any piece of state defined in the state object that you want to pass down to this widget\n      mapStateToProps: [\n        "selectedFlightId",\n        "selectedFlight",\n      ],\n    },\n  ],\n};\n\nexport default config;\n')),(0,o.kt)("h2",{id:"headertext"},"headerText"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"type: string"),(0,o.kt)("li",{parentName:"ul"},"required: no")),(0,o.kt)("p",null,"A string that defines what should be the headerText, will replace the default headerText."),(0,o.kt)("h2",{id:"placeholdertext"},"placeholderText"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"type: string"),(0,o.kt)("li",{parentName:"ul"},"required: no")),(0,o.kt)("p",null,"A string that defines the input field placeholder text."),(0,o.kt)("h2",{id:"savemessages"},"saveMessages"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"type: function"),(0,o.kt)("li",{parentName:"ul"},"signature: ",(0,o.kt)("inlineCode",{parentName:"li"},"js (messages, HTMLText) => void")),(0,o.kt)("li",{parentName:"ul"},"required: no")),(0,o.kt)("p",null,"A function that returns the messages and the HTMLText to be saved to to any storage location."),(0,o.kt)("h2",{id:"messagehistory"},"messageHistory"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"type: []Message | string"),(0,o.kt)("li",{parentName:"ul"},"required: no")),(0,o.kt)("p",null,"An array of messages or a string that will be displayed as the message history. If the element is a string it will be inserted as raw HTML into the chatbot inner container."),(0,o.kt)("h2",{id:"validator"},"validator"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"type: function"),(0,o.kt)("li",{parentName:"ul"},"required: no")),(0,o.kt)("p",null,"A function that will be called on every message to validate the message. If the function returns false the message will not be sent to the messageParser."),(0,o.kt)("h2",{id:"runinitialmessageswithhistory"},"runInitialMessagesWithHistory"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"type: boolean"),(0,o.kt)("li",{parentName:"ul"},"required: no")),(0,o.kt)("p",null,"If you return a HTML string as message history but still want to provide interactivity and begin the chatbot with initial messages defined in config after the HTML is inserted, you can set this flag to true."),(0,o.kt)("h2",{id:"disablescrolltobottom"},"disableScrollToBottom"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"type: boolean"),(0,o.kt)("li",{parentName:"ul"},"required: no")),(0,o.kt)("p",null,"A flag to turn off automatic scrolling of the message window to the bottom."))}p.isMDXComponent=!0}}]);